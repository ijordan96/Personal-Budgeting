openapi: 3.0.3
info:
  title: Personal Budget II - PostgreSQL connection
  description: |-
    This is an API developed by Ignacio Jordan for the backend develope course by CodeCademy. This project is based on the [envelope budgeting method](https://www.nerdwallet.com/article/finance/envelope-system), that in simple words implies saving your money in different envelopes for their specific pupose later in the month (or week) after getting paid.
    For this API I generate a database in PostgreSQL on my personal notebook containing 2 tables:
    - Envelopes: this tables contains the infomation of each envelope you like to have. It contains envelope_name (the category destined for the money), envelope_id and budget (actual money destined to the envelope)
    - Transactions: this tables contains the transactions that eventually substract the money from your envelopes. It contains the following columns: payment_id, payment_date, payment_amount, payment_recipient, envelope_id
    
    For future update it will be add an actual public endpoints and authentication.

   
  contact:
    email: ignaciobjordan@gmail.com
  version: 2.0.0
externalDocs:
  description: Github Repository
  url: https://github.com/ijordan96/Personal-Budgeting
tags:
  - name: Envelope
    description: Endpoint for your envelopes
  - name: Transactions
    description: Access to Petstore orders
paths:
  /envelopes:
    post:
      tags:
        - Envelope
      summary: Create an envelope
      description: Create an envelope
      operationId: createEnvelope
      requestBody:
        description: Create an envelope
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                budget:
                  type: number
              example:   # Sample object
                category: Savings
                budget: 25.75
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  addedEnvelope:
                    type: object
                    properties:
                      envelope_name:
                        type: string
                      envelope_id:
                        type: integer
                      amount:
                        type: number
                example:   # Sample object
                  response: Envelop Added
                  addedEnvelope: 
                    envelope_name: Savings
                    envelope_id: 1
                    amount: 25.75
        '400':
          description: Invalid format
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                example:   # Sample object
                  response: "It wasn't possible to add an envelope: Not valid envelope format"

    get:
      tags:
        - Envelope
      summary: Returns all the envelopes
      description: Returns all the envelopes
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    envelope_name:
                      type: string
                    envelope_id:
                      type: integer
                    amount:
                      type: number
                example:   # Sample object
                  allEvenlopes:
                    - envelope_id: 1
                      envelope_name: savings
                      amount: 75
                    - envelope_id: 2
                      envelope_name: dinners
                      amount: 195
                    - envelope_id: 3
                      envelope_name: Ailu
                      amount: 300
                  
                  
  /envelopes/{id}:
    get:
      tags:
        - Envelope
      summary: Find envelope by id
      description: Return specific envelope
      parameters:
        - name: id
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    envelope_name:
                      type: string
                    envelope_id:
                      type: integer
                    amount:
                      type: number
                example:   # Sample object
                    envelope_name: Savings
                    envelope_id: 1
                    amount: 250.75
                    
        '400':
          description: Invalid envelope id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "Envelope doesn't exist"
    delete:
      tags:
        - Envelope
      summary: Delete envelope an specific envelope
      description: Delete the envelope associated to the id in the path parameter, returns the envelope info
      parameters:
        - name: id
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    response: 
                      type: string
                    deletedEnvelop: 
                      type: object
                      properties:
                        envelope_name:
                          type: string
                        envelope_id:
                          type: integer
                        amount:
                          type: number
                example:   # Sample object
                    response: "Envelope Deleted"
                    deletedEnvelope: 
                      envelope_name: Savings
                      envelope_id: 1
                      amount: 250.75
                      
        '404':
          description: Invalid envelope id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "Envelope doesn't exist"
    put:
      tags:
        - Envelope
      summary: Update an envelope
      description: Update the envelope associated to the id passed as a parameter
      parameters:
        - name: id
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
      requestBody:
        description: Envelope body required
        content:
          application/json:
            schema:
              type: object
              properties:
                category:
                  type: string
                budget:
                  type: number
              required: [category, budget]
              example:   # Sample object
                category: Savings
                budget: 25.75
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    envelope_name:
                      type: string
                    envelope_id:
                      type: integer
                    amount:
                      type: number
                example:   # Sample object
                    response: "Envelope Updated"
                    updatedEnvelope: 
                      envelope_name: Savings
                      envelope_id: 1
                      amount: 25.75
                      
        '400':
          description: Invalid body schema
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "It wasn't possible to update an envelope: Not valid envelope format"
        '404':
          description: Invalid envelope id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "Envelope doesn't exist"
                  
                  
  /envelopes/transfer/{from}/{to}:
    get:
      tags:
        - Envelope
      summary: Transfer a part of the budget from an envelope to another
      description: Returns a map of status codes to quantities
      parameters:
        - name: from
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
        - name: to
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  envelope_name:
                    type: string
                  envelope_id:
                    type: integer
                  amount:
                    type: number
                example:   # Sample object
                  response: "Envelope transfer succesful"
                  updates: 
                    updatedFromEnvelope:
                      envelope_name: Savings
                      envelope_id: 1
                      amount: 175
                      
                    updatedToEnvelope:
                      envelope_name: Dinners
                      envelope_id: 2
                      amount: 295
                      
        '400':
          description: When the budget entered in the body isn't a number you'll get this response
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "Envelope transfer was not possible: Not valid transfer budget"
        '404':
          description: Invalid envelope id either for the 'from' envelope or the 'to' envelop. You'll get a response message according to the one that it's invalid
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "Envelope to substract budget doesn't exist"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "Envelope to transfer doesn't exist"
                 
  /transactions:
    post:
      tags:
        - Transactions
      summary: Create a transaction
      description: It creates a transaction, that substract money from an envelope
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                recipient:
                  type: string
                amount:
                  type: number
                envelope_id:
                  type: integer
              example:   # Sample object
                recipient: Taco Bell
                amount: 10.75
                envelope_id: 2
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    type: string
                  addedTransaction:
                    type: object
                    properties:
                      payment_id:
                        type: integer
                      payment_date:
                        type: string
                      payment_amount:
                        type: number
                      payment_recipient:
                        type: string
                      envelope_id:
                        type: integer
                example:   # Sample object
                  response: "Transaction added succesfully"
                  addedTransaction:  
                    payment_id: 10
                    payment_date: '2016-06-22T22:10:25.000Z'
                    payment_amount: 10.75
                    payment_recipient: Taco Bell
                    envelope_id: 2
                    
                                  
        '400':
          description: Error due to bad body schema, could be that the amount is not a number, the recipient is not a string or the envelope_id doesn't exist
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "Transaction not possible: Envelope doesn't exist"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "Transaction not possible: Not valid recipient"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "Transaction not possible: Not valid amount"

    get:
      tags:
        - Transactions
      summary: Returns all the transactions
      description: Returns all the transactions
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    allTransactions:
                      type: array
                      items:
                        type: object
                        properties:
                          payment_id:
                            type: integer
                          payment_date:
                            type: string
                          payment_amount:
                            type: number
                          payment_recipient:
                            type: string
                          envelope_id:
                            type: integer
                example:   # Sample object
                  allTransactions:
                    - payment_id: 2
                      payment_date: '2023-05-01T16:15:38.537Z'
                      payment_amount: 500
                      payment_recipient: Suits
                      envelope_id: 1
                    - payment_id: 3
                      payment_date: '2023-05-01T16:16:13.538Z'
                      payment_amount: 100
                      payment_recipient: Aldo's
                      envelope_id: 2
                    - payment_id: 4
                      payment_date: '2023-05-01T16:20:10.743Z'
                      payment_amount: 500
                      payment_recipient: Energy Bill
                      envelope_id: 3
                    
                  

                  
  /transactions/{id}:
    get:
      tags:
        - Transactions
      summary: Find transaction by id
      description: Return specific transaction
      parameters:
        - name: id
          in: path
          description: Transaction ID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  payment_id:
                    type: integer
                  payment_date:
                    type: string
                  payment_amount:
                    type: number
                  payment_recipient:
                    type: string
                  envelope_id:
                    type: integer
                example:   # Sample object
                    payment_id: 4
                    payment_date: '2023-05-01T23:00:18.379Z'
                    payment_amount: 500
                    payment_recipient: Energy Bill
                    envelope_id: 2
                     
        '404':
          description: Invalid transaction id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: Transaction doesn't exist
                  
    delete:
      tags:
        - Transactions
      summary: Delete an specific transaction
      description: Delete the transaction associated to the id in the path parameter, returns the transaction info
      parameters:
        - name: id
          in: path
          description: Transaction ID that need to be considered for filter
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    response: 
                      type: string
                    deletedtTransaction: 
                      type: object
                      properties:
                        payment_id:
                          type: integer
                        payment_date:
                          type: string
                        payment_amount:
                          type: number
                        payment_recipient:
                          type: string
                        envelope_id:
                          type: integer
                example:   # Sample object
                    response: Envelope Deleted
                    deletedTransaction:
                      payment_id: 10
                      payment_date: '2016-06-22T22:10:25.000Z'
                      payment_amount: 100
                      payment_recipient: jordi
                      envelope_id: 2
                    
        '404':
          description: Invalid envelope id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: Transaction doesn't exist
    put:
      tags:
        - Transactions
      summary: Update a transaction
      description: Update the transaction associated to the id passed as a parameter. For a different envelope ID from before, it will update both envelope, adding the sum that was substract before and substracting the sum from the new envelope. For same envelope ID, it will substract more money from the envelope's budget if the new transaction's amount is higher than before. On the other hand, if the transaction's new amount is lower than before, it will add more money to the budget.
      parameters:
        - name: id
          in: path
          description: Envelope ID that need to be considered for filter
          required: true
          schema:
            type: integer
      requestBody:
        description: Envelope body required
        content:
          application/json:
            schema:
              type: object
              properties:
                amount:
                  type: number
                recipient:
                  type: string
                envelope_id:
                  type: integer
              required: [amount, recipient,envelope_id]
              example:   # Sample object
                amount: '115'
                recipient: Nike
                envelope_id: 2
                
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                    envelope_name:
                      type: string
                    envelope_id:
                      type: integer
                    amount:
                      type: number
                example:   # Sample object
                    response: Transaction Updated
                    updatedTransaction:
                      payment_id: 11
                      payment_date: '2023-05-06T16:11:46.330Z'
                      payment_amount: 115
                      payment_recipient: Nike
                      envelope_id: 2
                    
        '400':
          description: Invalid body schema
          content:
            application/json:
              schema:
                oneOf:
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "It wasn't possible to update the transactione: Envelope doesn't exist"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "It wasn't possible to update the transaction: Not valid recipient"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "It wasn't possible to update the transaction: Not valid amount"
                - type: object
                  properties:
                      response:
                        type: string
                  example:
                    response: "It wasn't possible to update the transaction: envelope doesn't have the budget"
        '404':
          description: Invalid envelope id
          content:
            application/json:
              schema:
                type: object
                properties:
                    response:
                      type: string
                example:
                  response: "Transaction doesn't exist"
  

